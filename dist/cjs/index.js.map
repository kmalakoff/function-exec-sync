{"version":3,"sources":["index.ts"],"sourcesContent":["require('./polyfills.ts');\nconst fs = require('fs');\nconst path = require('path');\nconst cp = require('child_process');\nconst tmpdir = require('os').tmpdir || require('os-shim').tmpdir;\nconst suffix = require('temp-suffix');\nconst serialize = require('serialize-javascript');\nconst mkdirp = require('mkdirp');\nconst shortHash = require('short-hash');\nconst sleep = require('thread-sleep-compat');\n\nconst DEFAULT_SLEEP_MS = 100;\nconst ALLOWED_EXEC_PATH = ['node', 'node.exe', 'node.cmd'];\nconst isWindows = process.platform === 'win32';\n\n// @ts-ignore\nconst unlinkSafe = require('./unlinkSafe.ts');\n\nexport type ExecWorkerOptions = {\n  name?: string;\n  cwd?: string;\n  env?: string;\n  callbacks?: boolean;\n  execPath?: string;\n  sleep?: number;\n};\n\nexport default function functionExecSync(options: ExecWorkerOptions, filePath: string /* arguments */): any {\n  const args = Array.prototype.slice.call(arguments, 2);\n  const workerData = { filePath, args, callbacks: options.callbacks || false, env: options.env ?? process.env, cwd: options.cwd ?? process.cwd() };\n\n  const name = options.name ?? 'exec-worker-sync';\n  const temp = path.join(tmpdir(), name, shortHash(workerData.cwd));\n  const input = path.join(temp, suffix('input'));\n  const output = path.join(temp, suffix('output'));\n  const done = path.join(temp, suffix('done'));\n\n  // store data to a file\n  mkdirp.sync(path.dirname(input));\n  fs.writeFileSync(input, serialize(workerData), 'utf8');\n  unlinkSafe(output);\n\n  // call the function\n  const execPath = options.execPath || process.execPath;\n  const worker = path.join(__dirname, 'worker.js');\n\n  // only node\n  if (ALLOWED_EXEC_PATH.indexOf(path.basename(execPath).toLowerCase()) < 0) throw new Error(`Expecting node executable. Received: ${path.basename(execPath)}`);\n\n  // exec and start polling\n  if (!cp.execFileSync) {\n    const sleepMS = options.sleep ?? DEFAULT_SLEEP_MS;\n    let cmd = `\"${execPath}\" \"${worker}\" \"${input}\" \"${output}\"`;\n    cmd += `${isWindows ? '&' : ';'} echo \"done\" > ${done}`;\n    cp.exec(cmd);\n    while (!fs.existsSync(done)) {\n      sleep(sleepMS);\n    }\n  } else {\n    cp.execFileSync(execPath, [worker, input, output]);\n  }\n  unlinkSafe(input);\n  unlinkSafe(done);\n\n  // get data and clean up\n  let res;\n  try {\n    res = eval(`(${fs.readFileSync(output, 'utf8')})`);    \n    unlinkSafe(output);\n  } catch(err) {\n    throw new Error(`Output not found. Check the executable exists at: ${execPath}`)    \n  }\n\n  // throw error from the worker\n  if (res.error) {\n    const error = new Error(res.error.message);\n    for (const key in res.error) error[key] = res.error[key];\n    throw error;\n  }\n  // return the result\n  return res.value;\n}\n"],"names":["require","functionExecSync","options","filePath","args","Array","prototype","slice","call","arguments","workerData","callbacks","env","process","cwd","name","temp","path","join","tmpdir","shortHash","input","suffix","output","done","mkdirp","sync","dirname","fs","writeFileSync","serialize","unlinkSafe","execPath","worker","__dirname","ALLOWED_EXEC_PATH","indexOf","basename","toLowerCase","Error","cp","execFileSync","sleepMS","sleep","DEFAULT_SLEEP_MS","cmd","isWindows","exec","existsSync","res","eval","readFileSync","err","error","message","key","value","platform"],"mappings":"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"}