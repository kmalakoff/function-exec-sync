{"version":3,"sources":["index.ts"],"sourcesContent":["require('./polyfills.ts');\nconst fs = require('fs');\nconst path = require('path');\nconst cp = require('child_process');\nconst tmpdir = require('os').tmpdir || require('os-shim').tmpdir;\nconst suffix = require('temp-suffix');\nconst serialize = require('serialize-javascript');\nconst mkdirp = require('mkdirp');\nconst shortHash = require('short-hash');\nconst sleep = require('thread-sleep-compat');\n\nconst DEFAULT_SLEEP_MS = 100;\nconst NODES = ['node', 'node.exe', 'node.cmd'];\nconst isWindows = process.platform === 'win32';\n\nconst unlinkSafe = require('./unlinkSafe.ts');\n\nexport type ExecWorkerOptions = {\n  name?: string;\n  cwd?: string;\n  env?: object;\n  callbacks?: boolean;\n  execPath?: string;\n  sleep?: number;\n};\n\n// biome-ignore lint/suspicious/noExplicitAny: <explanation>\nexport default function functionExecSync(options: ExecWorkerOptions, filePath: string, ...args): any {\n  const workerData = {\n    filePath,\n    args,\n    callbacks: options.callbacks || false,\n    env: options.env ?? process.env,\n    cwd: options.cwd ?? process.cwd(),\n  };\n\n  const name = options.name ?? 'exec-worker-sync';\n  const temp = path.join(tmpdir(), name, shortHash(workerData.cwd));\n  const input = path.join(temp, suffix('input'));\n  const output = path.join(temp, suffix('output'));\n  const done = path.join(temp, suffix('done'));\n\n  // store data to a file\n  mkdirp.sync(path.dirname(input));\n  fs.writeFileSync(input, serialize(workerData), 'utf8');\n  unlinkSafe(output);\n\n  // call the function\n  const execPath = options.execPath || process.execPath;\n  const worker = path.join(__dirname, 'worker.js');\n\n  // only node\n  if (NODES.indexOf(path.basename(execPath).toLowerCase()) < 0) throw new Error(`Expecting node executable. Received: ${path.basename(execPath)}`);\n\n  // exec and start polling\n  if (!cp.execFileSync) {\n    const sleepMS = options.sleep ?? DEFAULT_SLEEP_MS;\n    let cmd = `\"${execPath}\" \"${worker}\" \"${input}\" \"${output}\"`;\n    cmd += `${isWindows ? '&' : ';'} echo \"done\" > ${done}`;\n    cp.exec(cmd);\n    while (!fs.existsSync(done)) {\n      sleep(sleepMS);\n    }\n  } else {\n    cp.execFileSync(execPath, [worker, input, output]);\n  }\n  unlinkSafe(input);\n  unlinkSafe(done);\n\n  // get data and clean up\n  // biome-ignore lint/suspicious/noExplicitAny: <explanation>\n  let res: { error: { [x: string]: any; message: string }; value: any };\n  try {\n    res = eval(`(${fs.readFileSync(output, 'utf8')})`);\n    unlinkSafe(output);\n  } catch (err) {\n    throw new Error(`function-exec-sync: Error: ${err.message}. Function: ${filePath}. Exec path: ${execPath}`);\n  }\n\n  // throw error from the worker\n  if (res.error) {\n    const error = new Error(res.error.message);\n    for (const key in res.error) error[key] = res.error[key];\n    throw error;\n  }\n  // return the result\n  return res.value;\n}\n"],"names":["functionExecSync","require","fs","path","cp","tmpdir","suffix","serialize","mkdirp","shortHash","sleep","DEFAULT_SLEEP_MS","NODES","isWindows","process","platform","unlinkSafe","options","filePath","args","workerData","callbacks","env","cwd","name","temp","join","input","output","done","sync","dirname","writeFileSync","execPath","worker","__dirname","indexOf","basename","toLowerCase","Error","execFileSync","sleepMS","cmd","exec","existsSync","res","eval","readFileSync","err","message","error","key","value"],"mappings":"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"}