{"version":3,"sources":["index.ts"],"sourcesContent":["require('./polyfills.ts');\nconst fs = require('fs');\nconst path = require('path');\nconst cp = require('child_process');\nconst tmpdir = require('os').tmpdir || require('os-shim').tmpdir;\nconst suffix = require('temp-suffix');\nconst serialize = require('serialize-javascript');\nconst mkdirp = require('mkdirp');\nconst shortHash = require('short-hash');\nconst sleep = require('thread-sleep-compat');\n\nconst DEFAULT_SLEEP_MS = 100;\nconst NODES = ['node', 'node.exe', 'node.cmd'];\nconst isWindows = process.platform === 'win32';\n\n// @ts-ignore\nconst unlinkSafe = require('./unlinkSafe.ts');\n\nexport type ExecWorkerOptions = {\n  name?: string;\n  cwd?: string;\n  env?: object;\n  callbacks?: boolean;\n  execPath?: string;\n  sleep?: number;\n};\n\n// biome-ignore lint/suspicious/noExplicitAny: <explanation>\nexport default function functionExecSync(options: ExecWorkerOptions, filePath: string /* arguments */): any {\n  const args = Array.prototype.slice.call(arguments, 2);\n  const workerData = {\n    filePath,\n    args,\n    callbacks: options.callbacks || false,\n    env: options.env ?? process.env,\n    cwd: options.cwd ?? process.cwd(),\n  };\n\n  const name = options.name ?? 'exec-worker-sync';\n  const temp = path.join(tmpdir(), name, shortHash(workerData.cwd));\n  const input = path.join(temp, suffix('input'));\n  const output = path.join(temp, suffix('output'));\n  const done = path.join(temp, suffix('done'));\n\n  // store data to a file\n  mkdirp.sync(path.dirname(input));\n  fs.writeFileSync(input, serialize(workerData), 'utf8');\n  unlinkSafe(output);\n\n  // call the function\n  const execPath = options.execPath || process.execPath;\n  const worker = path.join(__dirname, 'worker.js');\n\n  // only node\n  if (NODES.indexOf(path.basename(execPath).toLowerCase()) < 0) throw new Error(`Expecting node executable. Received: ${path.basename(execPath)}`);\n\n  // exec and start polling\n  if (!cp.execFileSync) {\n    const sleepMS = options.sleep ?? DEFAULT_SLEEP_MS;\n    let cmd = `\"${execPath}\" \"${worker}\" \"${input}\" \"${output}\"`;\n    cmd += `${isWindows ? '&' : ';'} echo \"done\" > ${done}`;\n    cp.exec(cmd);\n    while (!fs.existsSync(done)) {\n      sleep(sleepMS);\n    }\n  } else {\n    cp.execFileSync(execPath, [worker, input, output]);\n  }\n  unlinkSafe(input);\n  unlinkSafe(done);\n\n  // get data and clean up\n  // biome-ignore lint/suspicious/noExplicitAny: <explanation>\n  let res: { error: { [x: string]: any; message: string }; value: any };\n  try {\n    res = eval(`(${fs.readFileSync(output, 'utf8')})`);\n    unlinkSafe(output);\n  } catch (err) {\n    throw new Error(`function-exec-sync: Error: ${err.message}. Function: ${filePath}. Exec path: ${execPath}`);\n  }\n\n  // throw error from the worker\n  if (res.error) {\n    const error = new Error(res.error.message);\n    for (const key in res.error) error[key] = res.error[key];\n    throw error;\n  }\n  // return the result\n  return res.value;\n}\n"],"names":["functionExecSync","require","fs","path","cp","tmpdir","suffix","serialize","mkdirp","shortHash","sleep","DEFAULT_SLEEP_MS","NODES","isWindows","process","platform","unlinkSafe","options","filePath","args","Array","prototype","slice","call","arguments","workerData","callbacks","env","cwd","name","temp","join","input","output","done","sync","dirname","writeFileSync","execPath","worker","__dirname","indexOf","basename","toLowerCase","Error","execFileSync","sleepMS","cmd","exec","existsSync","res","eval","readFileSync","err","message","error","key","value"],"mappings":"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"}